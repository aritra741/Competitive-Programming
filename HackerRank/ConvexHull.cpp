#include <bits/stdc++.h>
#define ll long long
using namespace std;

struct point
{
    int x,y;
} points[100007], base, out;

bool operator == (point a, point b)
{
    return a.x==b.x and a.y==b.y;
}

int area( point p, point q, point r )
{
    int x[]= {p.x, q.x, r.x};
    int y[]= {p.y, q.y, r.y};

    ll a= 0;
    int j= 2;

    for(int i=0; i<3; i++)
    {
        a+=(x[j]+x[i])*(y[j]-y[i]);
        j= i;
    }

    if(a>0)
        return 1;
    if(a<0)
        return 2;
    return 0;
}

ll dist( point p, point q )
{
    return (p.x-q.x)*(p.x-q.x)+(p.y-q.y)*(p.y-q.y);
}

bool cmp( const point&a, const point&b  )
{
    int pos= area( base, a, b );

    if(pos==0)
    {
        ll d1= dist( base, a );
        ll d2= dist( base, b );

        return d1<d2;
    }

    return pos==1;
}

point nxt( stack<point> &st )
{
    if(st.empty())
    {
        cout<<"khali"<<endl;
        point p;
        return p;
    }
    point p= st.top();
    st.pop();
    if(st.empty())
    {
        cout<<"khali"<<endl;
        return p;
    }
    point q= st.top();
    st.push(p);
    return q;
}

void Hull( int n )
{
    int l=0;
    for(int i=0; i<n; i++)
        while( points[i].x<points[l].x or (points[i].x==points[l].x and points[i].y<points[l].y) )
            l= i;
    base= points[l];

    sort( points, points+n, cmp );

    for(int i=1; i<n-1; i++)
    {
        int pos= area( base, points[i], points[i+1] );

        if(pos!=0)
            break;
        points[i]= out;
    }

    for(int i=n-1; i>1; i--)
    {
        int pos= area( base, points[i], points[i-1] );

        if(pos!=0)
            break;
        points[i]= out;
    }

    stack <point> st;
    st.push(points[0]);
   // cout<<points[0].x<<" "<<points[0].y<<endl;
    int j=1;

    for(int i=1; i<n; i++)
    {
        if(points[i]==out)
            continue;
        st.push(points[i]);
        j=i;
      //  cout<<endl<<points[i].x<<" "<<points[i].y<<endl;
        break;

    }
    for(int i=j+1; i<n; i++)
    {
        if(points[i]==out)
            continue;
        st.push(points[i]);
    //    cout<<points[i].x<<" "<<points[i].y<<endl;
        break;
    }

    for(int i=3; i<n; i++)
    {
        point NXT= nxt(st);
        point tp= st.top();

        if(tp==out or out==points[i] or NXT==out or tp==NXT or tp==points[i] or NXT==points[i])
            continue;

     //   cout<<nxt(st).x<<" "<<nxt(st).y<<" "<< st.top().x<<" "<<st.top().y<<" "<<points[i].x<<" "<<points[i].y<<" "<<area( nxt(st), st.top(), points[i] )<<endl;
        //  cout<<area( nxt(st), st.top(), points[i] )<<endl;
        while( area( nxt(st), st.top(), points[i] )!=1 )
            st.pop();
        st.push(points[i]);
    }

    st.push(base);

    while(1)
    {
        point p= st.top();

        st.pop();
        if(st.empty())
            break;

        printf("%d %d\n",p.x,p.y);
    }


}

int main()
{
    out.x= 2000;
    out.y= 2000;

    int tc;
    cin>>tc;

    for(int t=1; t<=tc; t++)
    {
        int n;
        scanf("%d", &n);

        for(int i=0; i<n; i++)
        {
            point p;
            scanf("%d %d",&p.x,&p.y);
            points[i]= p;
        }
        printf("Case #%d\n", t);
        Hull(n);
    }
}
/*
907
113 235
964 467
357 710
83 956
286 122
160 583
854 203
129 230
515 477
117 623
257 360
828 347
962 993
399 706
310 638
1 917
78 685
634 760
113 329
508 514
346 403
318 10
761 505
54 128
941 989
427 101
379 213
9 695
144 818
998 693
386 167
993 412
45 56
850 724
978 732
420 802
506 361
879 898
720 443
579 888
292 112
183 819
555 235
958 216
244 571
955 70
982 591
11 299
173 840
105 3
235 123
600 767
499 577
385 986
776 533
620 507
116 234
867 887
629 855
57 239
42 687
298 866
340 513
892 567
791 761
507 9
656 481
283 910
536 967
406 718
654 484
181 661
250 159
83 101
182 636
189 227
367 516
486 419
729 569
311 603
650 142
188 994
204 426
425 435
774 319
195 154
28 339
595 561
642 946
605 223
88 14
423 846
471 372
429 23
138 196
353 164
72 205
503 42
629 458
199 369
688 965
412 138
624 799
465 244
247 873
11 914
600 730
370 189
861 165
81 137
689 261
212 670
285 321
809 510
710 454
24 142
427 989
756 786
644 203
235 986
414 558
466 499
923 667
754 507
854 705
807 429
436 961
566 909
190 885
510 864
915 594
480 235
58 867
513 767
438 451
574 334
154 807
550 325
939 742
715 309
341 421
378 39
517 523
243 788
126 166
962 326
600 729
219 471
330 179
221 12
792 940
621 269
256 798
931 668
158 550
785 751
335 997
144 203
586 64
981 127
490 120
129 723
857 999
238 268
327 976
333 757
224 969
996 386
523 864
868 708
270 767
673 980
207 637
427 862
62 123
722 628
702 704
798 275
834 945
204 982
692 704
164 126
24 871
783 859
208 505
487 569
521 606
886 1
226 89
984 979
300 184
573 637
909 984
846 115
831 642
609 707
989 773
480 43
582 73
683 417
978 693
414 375
745 318
813 786
731 349
915 437
482 932
546 95
675 804
173 325
812 150
458 29
391 508
907 872
533 419
803 59
670 120
837 427
628 868
584 34
959 773
872 410
283 250
790 573
605 954
335 903
621 634
946 480
742 282
322 554
0 370
955 179
871 214
282 279
52 779
509 758
337 869
962 189
394 734
828 492
991 421
623 572
742 793
509 130
413 425
913 468
317 385
240 726
754 379
559 297
247 727
120 402
710 312
358 955
589 229
648 136
988 25
179 535
411 320
623 917
425 926
899 977
775 557
501 840
34 482
330 924
319 253
307 729
218 956
360 894
279 651
503 492
705 321
29 495
88 610
733 77
61 253
934 463
970 241
406 692
12 921
893 556
418 640
908 416
992 747
348 260
324 186
203 893
873 883
458 525
873 147
706 424
694 73
524 738
953 641
287 983
316 42
828 246
803 605
838 243
380 178
598 591
983 361
314 127
137 257
765 422
227 312
234 192
271 344
882 244
962 226
141 932
261 218
981 356
134 927
918 749
931 589
929 413
414 489
120 701
980 896
596 655
688 636
169 969
141 829
108 290
728 968
555 816
563 670
346 644
318 891
654 787
145 408
330 337
364 464
375 284
695 525
305 906
309 244
876 80
947 211
613 361
15 653
741 815
780 600
728 345
985 540
956 240
745 543
301 512
5 689
669 536
269 714
361 933
863 907
798 289
326 640
642 276
555 263
848 292
929 845
875 687
50 110
915 586
15 766
822 476
21 529
85 524
499 900
375 67
392 598
580 184
97 286
511 263
152 290
615 149
368 1
567 298
373 150
168 323
305 137
264 786
240 963
476 829
21 719
353 216
669 288
288 304
481 562
408 638
74 897
422 843
677 80
295 966
454 815
158 951
0 180
592 567
650 516
276 343
974 726
145 441
939 837
528 414
994 944
801 45
485 192
385 197
611 277
136 311
921 741
201 707
266 154
138 238
831 519
283 885
530 271
68 744
140 722
911 982
423 156
221 952
997 636
621 621
663 102
918 682
946 797
749 603
603 913
90 595
659 464
381 276
702 29
262 555
606 850
50 115
188 202
601 412
966 152
77 960
220 22
581 962
565 467
935 579
222 907
76 642
778 396
228 39
422 227
915 885
883 33
444 338
22 166
169 372
964 136
589 169
319 416
832 731
982 113
482 198
784 246
755 607
401 278
678 635
493 775
398 602
681 436
593 470
145 860
769 252
236 761
689 661
67 49
701 969
849 765
658 161
709 84
44 415
706 107
486 844
519 299
804 846
50 623
709 532
0 592
37 128
496 583
934 80
13 662
622 592
514 243
963 415
959 122
867 804
202 998
881 974
57 164
281 21
44 341
781 808
136 21
536 772
493 388
855 797
649 449
128 884
77 46
82 381
125 140
724 36
53 724
721 812
983 918
289 300
681 906
276 638
812 193
511 652
727 646
968 137
801 647
478 58
358 698
570 71
193 822
194 58
831 815
388 163
900 13
304 221
23 970
214 73
936 62
358 845
579 305
998 264
404 484
894 228
489 684
343 617
567 140
962 794
941 526
446 70
5 253
681 510
145 130
935 206
26 442
840 201
891 192
380 909
260 588
506 296
10 951
718 622
76 618
608 768
705 650
625 627
933 866
377 578
347 790
348 600
307 383
787 374
316 599
406 117
893 523
839 353
590 120
786 235
628 803
496 681
889 265
403 875
825 952
716 189
600 992
816 212
386 146
49 151
467 227
113 660
524 260
305 995
247 626
399 859
42 973
558 911
471 511
951 893
724 963
830 923
302 623
527 470
161 847
903 760
122 423
215 581
701 61
707 107
498 441
193 51
698 986
933 256
504 751
106 203
491 94
794 448
24 924
390 561
900 930
289 557
598 672
862 117
187 65
691 11
116 138
517 887
362 136
858 71
41 837
878 2
994 823
621 481
274 925
280 458
216 599
546 851
172 25
66 336
731 235
619 521
399 304
694 162
299 793
649 536
324 230
337 733
811 296
763 425
496 294
409 741
896 33
824 812
662 486
429 857
864 352
920 279
360 768
600 233
691 698
694 255
55 685
566 585
93 278
120 475
486 153
581 214
345 142
685 822
130 988
909 941
287 669
101 243
772 581
224 224
502 935
541 216
676 94
162 154
290 542
152 165
695 813
737 856
527 209
446 436
915 374
981 303
211 76
176 344
589 587
73 170
303 772
233 568
385 598
696 451
566 698
846 539
249 915
624 975
701 333
414 602
900 921
378 61
249 346
627 107
369 271
847 700
435 373
799 386
105 145
12 194
86 463
607 727
311 505
166 457
943 103
747 556
827 216
342 937
780 827
267 742
818 188
326 482
581 726
747 385
127 265
954 136
214 137
775 846
942 515
552 40
586 116
559 743
770 575
583 655
921 803
932 791
806 863
747 24
642 443
840 683
945 764
167 284
649 403
770 829
120 404
17 456
442 38
359 229
263 467
729 356
155 13
289 704
223 139
577 369
950 479
108 555
226 918
30 256
772 331
795 759
370 928
109 895
58 506
791 852
693 471
902 380
679 711
320 159
179 773
780 17
891 728
257 782
333 418
963 64
386 116
480 480
568 932
536 727
999 100
643 743
696 656
508 779
816 836
555 719
749 647
409 37
192 416
788 806
344 108
218 698
504 433
595 372
278 875
199 860
620 504
702 642
11 729
894 604
459 655
103 692
832 232
587 585
527 253
513 721
310 593
800 336
529 240
416 863
568 425
565 540
646 802
805 1
148 606
113 572
324 822
672 59
442 489
454 785
92 209
67 713
667 340
0 94
1 123
997 925
594 563
710 696
56 141
212 648
454 868
375 686
118 187
489 758
38 552
558 256
100 697
776 508
835 770
878 274
926 752
596 731
721 452
518 991
831 351
175 820
293 815
678 167
653 683
351 811
536 441
872 763
987 201
266 341
130 966
63 78
658 577
915 700
703 289
194 531
246 923
649 343
389 225
753 467
743 18
142 924
587 839
887 694
788 245
790 745
236 948
30 318
729 747
836 468
521 45
173 265
970 484
679 431
162 200
725 238
389 732
314 639
605 30
335 124
284 409
831 978
269 697
759 336
288 994
267 487
516 709
516 533
470 751
741 31
344 872
629 315
653 69
599 183
465 75
764 66
958 33
827 989
993 440
223 862
122 362
310 305
762 604
825 290
631 265
351 843
475 196
269 22
403 209
272 585
827 905
*/
